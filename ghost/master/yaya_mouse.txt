//******************************************************************************
// YAYA　ゴーストテンプレート
// マウス入力関連辞書
//******************************************************************************


//******************************************************************************
//マウス処理部
//
//以下、実際のトークを記述します。関数名は以下の規則になっています。
//[種別] + [スコープ] + [部位]
//種別は、MouseMove, MouseDoubleClick, MouseWheelUp, MouseWheelDown のどれかです。
//スコープは、\0,\1,といったスコープ番号です。
//部位は、当たり判定のどの部位かを表します。当たり判定の無い場所でのイベントの場合
//部位はありません。
//******************************************************************************


//******************************************************************************
//撫で反応
//******************************************************************************

MouseMove0head : nonoverlap
{

  good_touch_count++
  if touch_count == 1 {
    "h111209ん……ありがとう。\nh111205あなたも無理しないでね。"
    "h111209あたたかいのね、あなたの手。"
    "h111209……誰かになでられる機会なんて、\nどんどんなくなってしまうものよね。\n…………h111205うん、ありがとう。\nh111201さ、いらっしゃい。あなたの頭もなでてあげるわh111207。"
  }
  elseif touch_count == 2 {
    "h111209ふふ……いっぱいなでてくれるのね。\nh111205あなたの手、あたたかくて好きよ。"
  }
  elseif touch_count > 2 {
    "h111209……。"
    "h111209……。"
    "h111209……。"
    "h111209……。"
    "h111209……ふふ……。"
  }
}

MouseMove0face : nonoverlap
{
  "h111205やさしく触れてくれるのね。\nh111209嬉しいわ、ありがとう。"
  "h111207くすぐったいわよ。"
}

MouseMove0bust : nonoverlap
{
  bad_touch_count++
  "h211209もっと触って。h212204あなたの欲望を見せて。"
  "h211202いいわよ。触って。\nh211205あなたの熱を感じたいの。"
  "h211204悪い人。h211209いいわ、いくらでも。"
  "h211209遠慮がないのね。h211204いいえ、そのほうが嬉しいわ。"
}

//******************************************************************************
//つつかれ反応
//******************************************************************************

MouseDoubleClick0
{
  if TalkStatus == 'talking' {
    OnOpenMenu("h321209……。")
  }
  else {
    if touch_count == 1 {
      OnOpenMenu
    }
    elseif touch_count == 2 {
      OnOpenMenu("h321201%(DialogConfused)聞こえてるわよ？")
    }
    elseif touch_count > 2 {
      OnOpenMenu("h321209……。")
    }
  }
}

MouseDoubleClick0bust
{
  bad_touch_count++
  if touch_count == 1 {
    OnOpenMenu("h312109……普通に呼んで。")
  }
  elseif touch_count > 1 {
    OnOpenMenu("h311109……。")
  }
}

//******************************************************************************
// 引き寄せ反応（下ホイール）
//******************************************************************************

MouseWheelDown0shoulder
{
  if touch_count == 1 {
    "h111209ん。\nh111205……。\nh111201………h111204ふふ。"
  }
  elseif touch_count == 2 {
    "h100000あっ……。h111209…………h111205まだ、こうしていたいの？"
  }
  elseif touch_count > 2 {
    "h111209……。"
  }
}

MouseWheelDown0hand
{
  if touch_count == 1 {
    "h111202うん？\n……h111205手を引いて、h111204それからどうするの？"
    "h111204……どこかへ連れて行ってくれるの？\n111209残念だけど、私はここを動かないわよ。"
  }
  elseif touch_count == 2 {
    "h111205ぎゅーっ……h111201。h111204ふふ。"
    "h111209……離してくれないの？困ったわね……h111207ふふ……"
  }
  elseif touch_count > 2 {
    "……。"
  }
}

//******************************************************************************
// 見つめ反応（静止時）
//******************************************************************************

OnMouseLookAtbust : nonoverlap
{
  bad_touch_count++
  "……h112204視線って案外わかるのよ？\nやるならh112207悟られないようにしないと。"
  "……h212109見すぎよ。"
}

OnMouseLookAtBeforebust : nonoverlap
{
  "h112104"
}

OnMouseLookAtface : nonoverlap
{
  "……h321207顔に何かついてる？"
  "h321201……h321207そんなに見つめられると、困ってしまうわ。\nh121204面白いわけでもないでしょう？"
}

OnMouseLookAtBeforeface : nonoverlap
{
  "h321201"
}

DialogSurprised
{
  "！……"
  "なっ……"
}

DialogConfused
{
  "……"
  "あの……"
}

//******************************************************************************
//マウス処理部コア
//AYATEMPLATE.MouseMoveWheelFuncの2番目の数字が「感度」です。
//1番目の数字（0か1）は、MoveかWheelかを判別するためのもので、
//変更の必要はありません。
//******************************************************************************

// 触り反応時の共通処理
CommonEventMousePre
{
  TalkStatus = "touch"
  lastresponce = systemuptime
  first_touch = 1
}

OnMouseEvent
{
  "\![timerraise,30000,1,OnTouchCountReset,reset]"
  --
  InsertLineFeed(SetBalloonSurface + CanselLookAt + NextTouchTalk)
}

CommonEventMousePost
{
}

OnTouchCountReset
{
  touch_count = 0
  last_touch_part = ""
}

OnMouseMove
{
  NextTouchTalk = AYATEMPLATE.MouseMoveWheelFunc(0,50,"MouseMove")
  if NextTouchTalk != "" {
    CommonEventMousePre
    "\![raise,OnMouseEvent]"
  }
}

OnMouseDoubleClick
{
  NextTouchTalk = AYATEMPLATE.MouseEventExec("MouseDoubleClick")
  if NextTouchTalk != "" {
    CommonEventMousePre
    "\![raise,OnMouseEvent]"
  }
}

OnMouseClickEx
{
  if reference[5] == "middle" {
    NextTouchTalk = AYATEMPLATE.MouseEventExec("MouseWheelClick")
    if NextTouchTalk != "" {
      CommonEventMousePre
      "\![raise,OnMouseEvent]"
    }
  }
}

CanselLookAt
{
  "\![timerraise,0,1,OnMouseLookAtBefore%(_argv[0])]"
  --
  "\![timerraise,0,1,OnMouseLookAt%(_argv[0])]"
}

OnMouseLookAtBefore
{
  "\C\![raise,OnMouseLookAtBefore%(reference[0])]"
}

IsMouseTalkExist
{
  // _argv[0]: OnMouseClickなど
  // _argv[1]: reference[3]
  // _argv[2]: reference[4]
  _fname1 = _argv[0] + TOSTR(_argv[1]) + TOSTR(_argv[2])
  _fname2 = _argv[0] + TOSTR(_argv[1])

  if ISFUNC(_fname1) || ISFUNC(_fname2) {
    1
  }
  else {
    0
  }
}

//******************************************************************************
//マウスイベントコア
//******************************************************************************

TouchCount
{
  // _argv[0]: 触り反応の部位
  if last_touch_part == _argv[0] {
    touch_count += 1
  }
  else {
    touch_count = 1
  }
  last_touch_part = _argv[0]
}

AYATEMPLATE.MouseEventExec
{
  _fname = _argv[0] + TOSTR(reference[3]) + TOSTR(reference[4])
  if ISFUNC(_fname) {
    TouchCount(reference[4]) // 追加
    lastmouseevent = _fname
    EVAL(_fname)
    return
  }

  _fname = _argv[0] + TOSTR(reference[3])
  if ISFUNC(_fname) {
    TouchCount(reference[4]) // 追加
    lastmouseevent = _fname
    EVAL(_fname)
    return
  }
}

AYATEMPLATE.MouseMoveWheelFunc
{
  _side = TOINT(reference[3])
  if _argv[0] {
    _side += 10
  }

  if AYATEMPLATE.strokeid[_side] == reference[4] {
    if (GETTICKCOUNT - TOINT(AYATEMPLATE.stroketimer[_side])) > 1500 {
      AYATEMPLATE.stroke[_side] = 1
    }
    AYATEMPLATE.stroketimer[_side] = GETTICKCOUNT

    _stroke = TOINT(AYATEMPLATE.stroke[_side])
    _stroke += 1
    AYATEMPLATE.stroke[_side] = _stroke

    if _stroke >= _argv[1] {
      if 'talking' !_in_ status  {
        AYATEMPLATE.MouseEventExec(_argv[2]);
        AYATEMPLATE.stroke[_side] = 1
      }
    }
  }
  else {
    AYATEMPLATE.stroke[_side] = 1
    AYATEMPLATE.stroketimer[_side] = GETTICKCOUNT
    AYATEMPLATE.strokeid[_side] = reference[4]
  }
}

