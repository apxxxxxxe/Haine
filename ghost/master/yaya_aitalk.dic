//******************************************************************************
// ランダムトーク
//******************************************************************************

RandomTalk
{
  UpdateUserRating
  lastanchor = ""
  lastresponce = systemuptime
  TalkStatus = "talking"
  total_talk_count++

  SetBalloonSurfaceSakura
  --
  lasttalk = InsertLineFeed(roulette.exec('talks'))
  lasttalk
  --
  "\![raise,OnRandomTalkEnd]"
}

OnRandomTalkEnd
{
  TalkStatus = "none"
}

talks : array
{
  talk_special

  SetBalloonSurfaceSakura + talk_all

  if TalkTopicLife {
    SetBalloonSurfaceSakura + ShowTopic("life") + talk_life
  }

  if TalkTopicHorrow {
    SetBalloonSurfaceSakura("library") + ShowTopic("horrow") + talk_hollow
  }

  if !TalkTopicHorrow && !TalkTopicLife {
    // はなすことがない
  }
}

talk_all : array
{
	if isMad {
		"あなた。聞こえているのでしょう、あなた。"
		"終わっても終わっても届かないのよ。いつまでも……いつまでもいつまでも！"
		"いつまでこんなことを続ければいいの。"
	}

	if isMiserable {
		"こうして肉を焼いていると惨めになるわ。死にたいと言いながら生きるための作業をしている。この体にもはや食事は要らないのだから、なおさら。"

		"毎日の習慣をこなせば、いくらか正気が保てるのでしょう。日常に散りばめた正気のかけらを集めているの。"
	}

	if isThankful {
		"あなたが来てくれていなければ死んでいたかもしれないわ。いえ、死んではいるのだけど。ふふ。それでもこうして笑えているのだもの。"
	}

	"頭のおかしい女のもとに足しげく通うのは、頭のおかしい%(sex)。気が合うわね？ふふ。"

	"デストルドーを肯定するために。あなたもそうなのでしょう？"
}

talk_life : array
{
}

talk_hollow : array
{
}

talk_special : array
{
}

//------------------------------------------------------------------------------
// アンカートーク
//------------------------------------------------------------------------------

OnKeyPress
{
  if isKeyBlocked {
    return
  }

  case reference[0] {
    when "t" {
      SetBalloonSurfaceSakura
      --
      RandomTalk
    }
    when "m" {
      SetBalloonSurfaceSakura
      --
      "\![raise,OnMouseDoubleClick,0,0,0,0,__SYSTEM_KEYDOWN_COL,0,mouse]"
    }
    when "r" {
      SetBalloonSurfaceSakura
      --
      "\1リロードします\![change,ghost,%(sakura_name)]"
    }
    when "d" {
      isdebug = ! isdebug
      isValidLookAtResponse = isdebug
      "h111209\1デバッグモードを"
      --
      if isdebug {
        "ONにしました。再度dキーでOFF"
      }
      else {
        "OFFにしました"
      }
    }
  }
  if isdebug && ISFUNC("OnDebugKeyPress") {
    OnDebugKeyPress(reference[0])
  }
}

//******************************************************************************
// 時報
//******************************************************************************

//------------------------------------------------------------------------------
//OnMinuteChangeイベント
//------------------------------------------------------------------------------

OnMinuteChange
{
  if minute == 0 && IsJihouActive == "有効" {
    "\1%(hour)時だ"
  }

  if (systemuptime - lastresponce) >= (60 * uwanosora_minute) {
    // 最後のランダムトーク・触り反応から
    // %(uwanosora_minute)分が経ったとき,上の空になる
    "h111105"
    "h111106"
  }
}


//------------------------------------------------------------------------------
//OnSecondChangeイベント
//1 秒毎に実行される。ここではあまり重い処理を行わないこと
//このテンプレートでは、見切れ処理のみ行っている
//---------------------------------------------------------------------------
OnSecondChange
{
  now = (hour, minute, second)
  ghostuptime = systemuptime - ghostboottime
  UpdatePomodoroTimer
}

//------------------------------------------------------------------------------
//OnSurfaceRestoreイベント
//------------------------------------------------------------------------------
OnSurfaceRestore
{
  "h111103\_w[2500]h111109\_w[100]h111101"
  "h111103\_w[2500]h111109\_w[100]h111101"
  "h111101\_w[2500]h111109\_w[100]h111102\_w[2500]h111105"
  "h111101\_w[2500]h111109\_w[100]h111102\_w[2500]h111105"
  "h111109\_w[2500]h111103"
  "h111109\_w[2500]h111103"
  "h111109\_w[2500]h111105"
  "h111109\_w[2500]h111105"
  --
  "\1\s[10000]\e"
}

OnBalloonBreak
{
  TalkStatus = "none"
}

OnBalloonClose
{
  OnBalloonBreak
}

//******************************************************************************
// トランスレータ
//******************************************************************************

//------------------------------------------------------------------------------
//OnTranslateイベント
//------------------------------------------------------------------------------

OnTranslate
{
  _text = reference[0]

  if willTranslate {
    _text = TextOnlyTranslator(_text,"TextOnlyTranslatorFunc")
  } else {
	willTranslate = 1
  }

  _text
}

// TextOnlyTranslator, TextOnlyTranslatorFunc: 以下より
// http://emily.shillest.net/ayaya/?cmd=read&page=Tips%2FOnTranslate%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9&word=OnTranslate
TextOnlyTranslator
{
  _string = RE_SPLIT(_argv[0],"\\(\\|q\[.*?\]\[.*?\]|[!&8cfijmpqsn]\[.*?\]|[-*+014567bcehntuvxz]|_[ablmsuvw]\[.*?\]|__(t|[qw]\[.*?\])|_[!?+nqsV]|[sipw][0-9])")
  _n = ARRAYSIZE(_string)
  _tag = RE_GETSTR()
  _tr = ""
  _qs = 0

  for _i = 0 ; _i < _n ; _i++ {
    _tr += EVAL("%(_argv[1])(_string[_i],_qs)")
    _tr += _tag[_i]
    if "\_q" _in_ _tag[_i] {
      _qs = ! _qs
    }
  }

  _tr
}

TextOnlyTranslatorFunc
{
  //_argv[0] = 置換対象テキスト
  //_argv[1] = クイックセクション内か否か

  _text = _argv[0]
  if ! _argv[1] {

    //サーフェス入力の簡単化と関数埋め込み: h111101のようにしてサーフェス表示&まばたき補完関数を埋め込む
    _text = SurfaceSnippet(_text)

    // ウェイトの挿入や表記の置換
    _words = (/
        "…\n"     ,   "\![quicksection,1]…\![quicksection,0]\n\_w[1000]", /
        "…"       ,   "\![quicksection,1]…\_w[500]\![quicksection,0]",    /
        "。"      ,   "\_l[@0.5em]\_w[1200]",                                      /
        "、"      ,   "、\_w[600]",                                       /
        "！"      ,   "！\_w[900]",                                       /
        "かしら？",   "かしら　\_w[1200]",                                /
        "？"      ,   "？\_w[1200]",                                      /
        "\n\n"    ,   "\n\_w[1000]\n"                                     /
        )
    for _i = 0; _i < ARRAYSIZE(_words); _i+=2 {
      _text = REPLACE(_text,_words[_i],_words[_i + 1])
      //φでエスケープできる（里々と同じ記法）
      _text = REPLACE(_text,"φ"+_words[_i + 1],_words[_i])
    }

    // \Cが文頭以外に含まれている場合、適用されるように加工
    if STRSTR(_text, "\C", 0) > 0 {
      _text = "\C" + _text
    }

  }
  _text
}

