//******************************************************************************
// ランダムトーク
//******************************************************************************

RandomTalk
{
  UpdateUserRating
  lastanchor = ''
  lastresponce = systemuptime
  total_talk_count++

  SetBalloonSurfaceSakura
  --
  lasttalk = InsertLineFeed(roulette.exec('talks'))
  ShowUserEmotions + lasttalk
}

talks : array
{
  _max = 100
  SetBalloonSurfaceSakura('library')
  --
  if user_emotions[4] > 1 {
    '/
    \1(落ち着かない)\_w[1000]'
    --
    '/
    h1111204なにか不安なことでもあるのかしら？\nh1111209大丈夫よ。ここには誰も来ないわ。/
    ' + AddUserEmotions('不安', -1)
  }
  elseif user_emotions[0] > 1 {
    '/
    h1111207なんだか嬉しそうね。いいことでもあったのかしら。/
    '
  }

  {
    // ユーザの感情によらない普通のトーク

    "/
    h1111209頭のおかしい女のもとに足しげく通うのは、頭のおかしい%(sex)。/
    h1111204気が合うわね？h1111207ふふ。/
    " + AddUserEmotions('興味', 1, '嫌悪', 1)

    '/
    h1111205\1ハイネは棒状の道具をカチャカチャと並べている。/
    \0h1111201ふふ、気になる？h1111205これはエンバーミングツール。\n/
    遺体の保存処理をするときに使う道具よ。\n/
    腐敗しやすい内臓は、これらを使って取り出されるの。\n/
    \n/
    h1111202もしあなたがここで死んだら、これで丁寧に処置してあげる。\n/
    h1111207死んだ後の約束よ。h1111204素敵でしょう？/
    ' + AddUserEmotions('不安', 1)

    '/
    h1111209黒死病が蔓延していたとき、問題になっていたのがいわゆる「早すぎた埋葬」。\n/
    h1111205ある技師は生き埋めにされる恐怖から逃れるため、棺の内側から埋葬者が生きていることを知らせる仕組みがついた棺を開発したの。\n/
    h1111204彼、デモンストレーションのために自ら生き埋めになってみせたそうよ。\n/
    \n/
    h1211209支援者に強制でもされたのかしら。自分からそんな真似を？なんにせよ、h1211205狂気の沙汰ね。/
    ' + AddUserEmotions('不安', 1, '興味', 1)

    '/
    h1111204霧を固めれば簡単な道具くらいは作れるわ。h1111209でも、しばらくすると解けてしまうし、h1111206何より結局は霧だから。\n/
    h1121209刃物はなまくら、部品はがたがた、生物は、h1121205人形未満。\n/
    h1121205ちょっとした遊びに使うくらいがせいぜいね。/
    '

    '/
    h1111205ある本を最初に読んだときの感動と、何度も読み返して全て見知った後の倦み。どちらがその本の真の印象かしら？\n/
    h1111209答えは両方。印象とはその時々で変わるもの。h1111205心の形が一つに定まることなんて、稀だもの。/
    ' + AddUserEmotions('興味', 1)
  }
}

//------------------------------------------------------------------------------
// アンカートーク
//------------------------------------------------------------------------------

OnKeyPress
{
  if IsKeyBlocked {
    return
  }

  case reference[0] {
    when 't' {
      SetBalloonSurfaceSakura
      --
      RandomTalk
    }
    when 'm' {
      SetBalloonSurfaceSakura
      --
      '\![raise,OnMouseDoubleClick,0,0,0,0,__SYSTEM_KEYDOWN_COL,0,mouse]'
    }
    when 'r' {
      '\![reload,shiori]'
      --
      OnBoot
    }
    when 'd' {
      isdebug = !isdebug
      isValidLookAtResponse = isdebug
      'h1111209\1デバッグモードを'
      --
      if isdebug {
        'ONにしました。再度dキーでOFF'
      }
      else {
        'OFFにしました'
      }
    }
  }

  if isdebug && ISFUNC('OnDebugKeyPress') {
    OnDebugKeyPress(reference[0])
  }
}

//******************************************************************************
// 時報
//******************************************************************************

//------------------------------------------------------------------------------
//OnMinuteChangeイベント
//------------------------------------------------------------------------------

OnMinuteChange
{
  if (systemuptime - lastresponce) >= (60 * uwanosora_minute) {
    // 最後のランダムトーク・触り反応から
    // %(uwanosora_minute)分が経ったとき,上の空になる
    'h1111105'
    'h1111106'
  }
}

OnHourTimeSignal
{
  if IsJihouActive == '有効' {
    "\1%(hour)時だ"
  }
}

//------------------------------------------------------------------------------
//OnSecondChangeイベント
//1 秒毎に実行される。ここではあまり重い処理を行わないこと
//このテンプレートでは、見切れ処理のみ行っている
//---------------------------------------------------------------------------
OnSecondChange
{
  now = (hour, minute, second)
  ghostuptime = systemuptime - ghostboottime
}

//------------------------------------------------------------------------------
//OnSurfaceRestoreイベント
//------------------------------------------------------------------------------
OnSurfaceRestore
{
  'h1111103\_w[2500]h1111109\_w[100]h1111101'
  'h1111101\_w[2500]h1111109\_w[100]h1111102\_w[2500]h1111105'
  'h1111109\_w[2500]h1111103'
  'h1111109\_w[2500]h1111105'
  --
  '\1\s[10000]\e'
}

OnBalloonBreak
{
}

OnBalloonClose
{
  OnBalloonBreak
}

//******************************************************************************
// トランスレータ
//******************************************************************************

//------------------------------------------------------------------------------
//OnTranslateイベント
//------------------------------------------------------------------------------

OnTranslate
{
  _text = reference[0]

  if willTranslate {
    _text = TextOnlyTranslator(_text, 'TextOnlyTranslatorFunc')
  }
  else {
    willTranslate = 1
  }

  _text
}

// TextOnlyTranslator, TextOnlyTranslatorFunc: 以下より
// http://emily.shillest.net/ayaya/?cmd=read&page=Tips%2FOnTranslate%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9&word=OnTranslate
TextOnlyTranslator
{
  _string = RE_SPLIT(_argv[0], '\\(\\|q\[.*?\]\[.*?\]|[!&8cfijmpqsn]\[.*?\]|[-*+1014567bcehntuvxz]|_[ablmsuvw]\[.*?\]|__(t|[qw]\[.*?\])|_[!?+nqsV]|[sipw][0-9])')
  _n = ARRAYSIZE(_string)
  _tag = RE_GETSTR()
  _tr = ''
  _qs = 0

  for _i=0; _i<_n; _i++ {
    _tr += EVAL("%(_argv[1])(_string[_i],_qs)")
    _tr += _tag[_i]
    if '\_q' _in_ _tag[_i] {
      _qs = !_qs
    }
  }

  _tr
}

TextOnlyTranslatorFunc
{
  //_argv[0] = 置換対象テキスト
  //_argv[1] = クイックセクション内か否か

  _text = _argv[0]
  if !_argv[1] {

    //サーフェス入力の簡単化と関数埋め込み: h1111101のようにしてサーフェス表示&まばたき補完関数を埋め込む
    _text = SurfaceSnippet(_text)

    // ウェイトの挿入や表記の置換
    _words = ( /
      '…\n', '\![quicksection,1]…\![quicksection,0]\n\_w[1000]', /
      '…', '\![quicksection,1]…\_w[500]\![quicksection,0]', /
      '。', '。\_w[1200]', /
      '、', '、\_w[600]', /
      '！', '！\_w[900]', /
      '？', '？\_w[1200]', /
      '\n\n', '\n\_w[1000]\n', /
      'あなた', 'おまえ' /
    )
    for _i=0; _i<ARRAYSIZE(_words); _i += 2 {
      _text = REPLACE(_text, _words[_i], _words[_i+1])
      //φでエスケープできる（里々と同じ記法）
      _text = REPLACE(_text, 'φ'+_words[_i+1], _words[_i])
    }

    // \Cが文頭以外に含まれている場合、適用されるように加工
    if STRSTR(_text, '\C', 0) > 0 {
      _text = '\C' + _text
    }
  }

  // 末尾のウェイトを削除(statusの'talking'判定を見た目通りにするため)
  _text = RE_REPLACE(_text, '\\_w\[\d+\]$', '')

  _text
}
