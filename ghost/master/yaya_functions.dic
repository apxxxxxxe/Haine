//******************************************************************************
//関数辞書
//******************************************************************************

PosOffset
{
  _offset = balloon_rows
  if balloon_name == '霧の郊外にて' {
    _offset += 1
  }
  _offset += 'em'
  _offset
}

OnBalloonChange
{
  GetBalloonInfo
}

OnSurfaceChange
{
  current_surface = reference[0]
}

// サーフェス変更の際に目線が動くとき、なめらかに見えるようにまばたきのサーフェスを補完する関数
OnSurfaceComplete
{
  _delay = 100

  _dest_surface = TOINT(reference[0]) // 頬・眉・腕・口・目
  _dest_eyes = _dest_surface % 10 // 目
  _dest_remain = _dest_surface - _dest_eyes // 頬・眉・腕・口
  _from_surface = current_surface
  _from_eyes = _from_surface % 10
  _from_remain = _from_surface - _from_eyes

  _middle_surface = _dest_surface
  if (_from_eyes == 7 || _from_eyes == 9) && (_dest_eyes >= 1 && _dest_eyes <= 3) {
    //直前が目閉じかつ目標が全目の場合
    "\s[%(_dest_surface + 3)]"
  }
  elseif (_dest_eyes == 7 || _dest_eyes == 9) && (_from_eyes >= 1 && _from_eyes <= 3) {
    // 直前が全目かつ目標が目閉じの場合
    "\s[%(_dest_remain + _from_eyes + 3)]"
  }
  elseif (_dest_eyes >= 1 && _dest_eyes <= 3) && (_from_eyes >= 1 && _from_eyes <= 3) && (_from_eyes != _dest_eyes) {
    // 直前が全目かつ目標が全目の場合（直前と目標が同じ場合を除く）
    "\s[%(_from_surface + 3)]\_w[%(_delay)]\s[%(_dest_remain + 9)]\_w[%(_delay)]\s[%(_dest_surface + 3)]"
  }
  elseif (_dest_eyes >= 4 && _dest_eyes <= 6) && (_from_eyes >= 1 && _from_eyes <= 3) && ((_from_eyes + 3) != _dest_eyes) {
    // 直前が全目かつ目標が半目の場合（直前と目標が同じ場合, 直前と目標の目線方向が同じ場合を除く）
    "\s[%(_from_surface + 3)]\_w[%(_delay)]\s[%(_dest_remain + 9)]"
  }
  elseif (_dest_eyes >= 1 && _dest_eyes <= 3) && (_from_eyes >= 4 && _from_eyes <= 6) && ((_from_eyes - 3) != _dest_eyes) {
    // 直前が半目かつ目標が全目の場合（直前と目標が同じ場合, 直前と目標の目線方向が同じ場合を除く）
    "\s[%(_dest_remain + 9)]\_w[%(_delay)]\s[%(_dest_surface + 3)]"
  }
  else {
    "\s[%(_dest_surface)]"
    return
  }
  --
  "\_w[%(_delay)]\s[%(_dest_surface)]"
}

SetBalloonSurfaceSakura
{
  '\0'
  --
  case _argv[0] {
    when 'large' {
      '\b[2]'
    }
    when 'garden' {
      '\b[4]'
    }
    when 'library' {
      '\b[6]'
    }
    when 'plain' {
      '\b[8]'
    }
    others
    {
      '\b[0]'
    }
  }
}

SetBalloonSurfaceKero
{
  '\1'
  --
  case _argv[0] {
    when 'living' {
      '\b[2]'
    }
    when 'large' {
      '\b[4]'
    }
    when 'garden' {
      '\b[6]'
    }
    when 'library' {
      '\b[8]'
    }
    when 'plain' {
      '\b[10]'
    }
    others
    {
      '\b[0]'
    }
  }
}

//現在のサーフェス番号を桁で分解して配列として返す
//10000の位:顔色 1000の位:眉 100の位:腕 10の位:口 1の位:目
GetSurfaceElements
{
  _e = current_surface / POW(10, 6 - _argv[0]) % 10
  _e
}

// icomoon.ttfのアイコンを呼び出しやすくする関数
ICON
{
  if (TOINT(_argv[1]) != 0) {
    _fontsize = _argv[1]
  }
  else {
    _fontsize = 12
  }

  "\f[cursorstyle,none]\f[height,%(_fontsize)]\f[name,icomoon.ttf]\_u[0x"
  --
  case _argv[0] {
    when 'stopwatch' {
      'e900'
    }
    when 'undo' {
      'e901'
    }
    when 'cog' {
      'e902'
    }
    when 'cross' {
      'e903'
    }
    when 'arrow-right' {
      'e904'
    }
    when 'arrow-left' {
      'e905'
    }
    when 'bubble' {
      'e906'
    }
    when 'info' {
      'e907'
    }
  }
  --
  ']\f[default]'
}

InsertLineFeed {
	// 文字数計算のため、OnTranslate処理をこちらで先に行う
	willTranslate = 0
	_text = TextOnlyTranslatorFunc(SurfaceSnippet(_argv[0]))

	InsertLineFeed.Exec(_text)
}

SurfaceSnippet
{
  RE_REPLACEEX(_argv[0], 'h([0-9]{6})', '\\0\\![embed,OnSurfaceComplete,$1]')
}

IsUnderLine
{
  if ! _argv[0] {
    '\f[strike,true]'
  }
}

OnTalkTopic
{
  _topicname = reference[0]
  if EVAL(_topicname) == 1 {
    EVAL(_topicname + '= 0')
  }
  else {
    EVAL(_topicname + '= 1')
  }
  '\C\c\![raise,OnTalkSettingMenu]'
}

ShowTopic
{
  '\_l[0,' + PosOffset + ']\f[height,11]\f[align,right]\![quicksection,true]'
  --
  _argv[0]
  --
  '\![quicksection,false]\_l[0,0]\f[default]'
}

FogHighlight
{
  _color = '160,192,192'
  '\f[color,' + _color + ']'
  --
  _argv[0]
  --
  '\f[color,default]'
}

UserRating
{
  UpdateUserRating

  _s = user_honesty
  if _s > 10 {
    'やさしいのね'
  }
  elseif _s < -10 {
    '欲望に忠実ね'
  }
  else {
    '久しぶりの客人'
  }
}

UpdateUserRating
{
  likability = good_touch_count + bad_touch_count + total_talk_count/3
  user_honesty = good_touch_count - bad_touch_count
}

//******************************************************************************
//最小化からの復帰 OnWindowStateRestore
//******************************************************************************

OnWindowStateRestore
{
  'h100000h111109\_w[500]h111101'
  'h100000h111109\_w[500]h111103'
  'h100000h111105\_w[500]h111101'
  "h100000h111103\_w[2500]h111101\_w[500]h111204"
}

//******************************************************************************
//時刻系関数
//******************************************************************************

CompareTime
{
  // 時刻の大小を比べて返す関数
  // 前者をa,後者をbとすると、
  // a > b :  1
  // a < b : -1
  // a = b :  0
  // を返す。

  // _argv[0]: a.hour
  // _argv[1]: a.minute
  // _argv[2]: a.second
  // _argv[3]: b.hour
  // _argv[4]: b.minute
  // _argv[5]: b.second

  _a.hour   = _argv[0]
  _a.minute = _argv[1]
  _a.second = _argv[2]
  _b.hour   = _argv[3]
  _b.minute = _argv[4]
  _b.second = _argv[5]

  if _a.hour > _b.hour {
    1
  }
  elseif _a.hour < _b.hour {
    -1
  }
  else {
    if _a.minute > _b.minute {
      1
    }
    elseif _a.minute < _b.minute {
      -1
    }
    else {
      if _a.second > _a.second {
        1
      }
      elseif _a.second < _a.second {
        -1
      }
      else {
        0
      }
    }
  }
}

CalcTime
{
  // _argv[0]: hour
  // _argv[1]: minute
  // _argv[2]: second
  // _argv[3]: 差分minute

  _hour = _argv[0]
  _minute = _argv[1] + _argv[3]
  _second = _argv[2]

  if _minute > 60 {
    _hour += _minute / 60 % 24
    _minute %= 60
  }
  elseif _minute < 0 {
    _hour -= (-1*_minute) / 60 + 1
    while _hour < 0
    {
      _hour += 24
    }
    while _minute < 0
    {
      _minute += 60
    }
  }

  (_hour, _minute, _second)
}

GetTimeSlot
{
  if CompareTime(now, CalcTime(sunrisetime, -30)) >= 0 && CompareTime(now, sunrisetime) < 0 {
    // 日の出30分前～日の出
    '日の出直前'
    return
  }
  elseif CompareTime(now, CalcTime(sunrisetime, 30)) < 0 && CompareTime(now, sunrisetime) >= 0 {
    // 日の出～日の出30分後
    '日の出直後'
    return
  }
  elseif CompareTime(now, CalcTime(sunsettime, -30)) >= 0 && CompareTime(now, sunsettime) < 0 {
    // 日没30分前～日没
    '黄昏時'
    return
  }
  elseif CompareTime(now, CalcTime(sunsettime, 30)) < 0 && CompareTime(now, sunsettime) >= 0 {
    // 日没～日没30分後
    '日没直後'
    return
  }

  case hour {
    when 22,23,0,1,2,3 {
      '深夜'
    }
    when 4,5,6,7,8,9,10,11 {
      '朝'
    }
    when 12,13 {
      '昼'
    }
    when 14,15,16,17 {
      '日中'
    }
    when 18,19,20,21 {
      '夜'
    }
  }
}

CalcTension {
	_pi = 3.14159265358
	_a = 5
	_period = 60 * 67

	_x = systemuptime % _period

	_rad = 2 * _pi / _period * _x

	SIN(_rad) * _a
}