// ルーレット選択関数
// arrayとして定義されたトーク群からルーレット選択する。
// 各トークに重みづけをし、判定のたびに選ばれたトークの重みはリセット、残りは重み+1する。
// より自然かつ万遍ないトークができたらいいな
roulette
{
  _name = _argv[0]
  EVAL(_name)[roulette.exec(_name)]
}

roulette.clean
{
  foreach GETVARLIST('roulette.'); _vname {
    ERASEVAR(_vname)
  }
}

roulette.talkhash
{
  _talk = _argv[0]
  _escaped_talk = SHIORI3FW.RemoveAllTags(_talk)
  STRDIGEST(SUBSTR(_escaped_talk, 0, 24))
}

roulette.exec
{
  _name = _argv[0]

  // 対象トークの重みと累積和を取得
  roulette.getcumsum(_name, &_cumsum, &_hashes)
  _cumsum_str = _cumsum
  _hashes = String2StrArray(_hashes)

  _prevvname = 'roulette.' + _name + '.prevhash'
  if !ISVAR(_prevvname) {
    LETTONAME(_prevvname, '')
  }

  // 重みを考慮してトークを選択
  _rate = 0.0
  _index = roulette.binsearch(_name, _cumsum_str, &_rate)
  while roulette.talkhash(EVAL(_name)[_index]) == EVAL(_prevvname) {
    // 前回と同じトークが選ばれたらやり直し
    _index = roulette.binsearch(_name, _cumsum_str, &_rate)
  }

  LETTONAME('roulette.'+_name+'.prevrate', _rate)

  lasthashes = _hashes

  // 各トークの重みを更新
  for _i=0; _i<ARRAYSIZE(_hashes); _i++ {
    _hash = _hashes[_i]
    _vname = 'roulette.' + _name + '.weight.' + _hash
    if _i == _index {
      // 選ばれたトークの重みを1に
      LETTONAME(_vname, 1)
    }
    else {
      // 選ばれなかったトークの重みを増やす
      _w = TOINT(EVAL(_vname)) * 4
      if _w > 1024 {
        _w = 1024
      }
      LETTONAME(_vname, _w)
    }
  }

  if _index > ARRAYSIZE(EVAL(_name)) {
    'error: 異常なインデックス:' + _index
    return
  }

  LETTONAME(_prevvname, roulette.talkhash(EVAL(_name)[_index]))

  _index
}

roulette.getcumsum
{
  _name = _argv[0]
  // _argv[1]: cumsum
  // _argv[2]: hashes

  // 現在のトークごとの重みを取得
  _weights = IARRAY
  _hashes = IARRAY
  foreach EVAL(_name); _talk {
    _hash = STRDIGEST(_talk)
    _vname = 'roulette.' + _name + '.weight.' + _hash
    _weight = 0
    if ISVAR(_vname) {
      _weight = EVAL(_vname)
    }
    else {
      _weight = 1
    }
    LETTONAME(_vname, _weight)
    _weights ,= _weight
    _hashes ,= _hash
  }

  // 重みの累積和を取得
  _cumsum = (IARRAY, 0)
  for _i=0; _i<ARRAYSIZE(_weights); _i++ {
    _cumsum ,= (_cumsum[_i] + _weights[_i])
  }

  // 配列はフィードバックに対応してない？ので文字列に変換して代入
  _argv[1] = Array2String(_cumsum) // cumsum
  _argv[2] = Array2String(_hashes) // hashes
}

Array2String
{
  _array = _argv
  _str = ''
  for _i=0; _i<ARRAYSIZE(_array); _i++ {
    _str += _array[_i] + ','
  }
  ERASE(_str, -1, 1)
}

String2StrArray
{
  SPLIT(_argv[0], ',')
}

String2IntArray
{
  _str_array = SPLIT(_argv[0], ',')
  _array = IARRAY
  for _i=0; _i<ARRAYSIZE(_str_array); _i++ {
    _array ,= TOINT(_str_array[_i])
  }
  _array
}

roulette.binsearch
{
  _name = _argv[0]
  _cumsum = String2IntArray(_argv[1])
  _totalweight = _cumsum[ARRAYSIZE(_cumsum) - 1]

  _value = RAND(_totalweight)

  _low = 0
  _high = ARRAYSIZE(_cumsum) - 1

  while _high - _low != 1 {
    _mid = TOINT((_low+_high)/2)
    if _cumsum[_mid] > _value {
      _high = _mid
    }
    else {
      _low = _mid
    }
  }

  _rate = (_cumsum[_high] - _cumsum[_low]) * 100.0 / _totalweight
  _argv[2] = _rate

  _low
}

roulette.test
{
  _name = _argv[0]

  _result = IARRAY
  _count = IARRAY
  _prev = -1

  for _i=0; _i<ARRAYSIZE(EVAL(_name)); _i++ {
    _result ,= 0
    _count ,= 0
  }

  for _k=0; _k<100; _k++ {
    _index = roulette.exec(_name)

    _result[_index] += 1
    if _prev == _index {
      _count[_index] += 1
    }
    _prev = _index
  }

  "/
  result: %(_result)\n/
  count: %(_count)\n/
  "
}
