// ルーレット選択関数
// arrayとして定義されたトーク群からルーレット選択する。
// 各トークに重みづけをし、判定のたびに選ばれたトークの重みはリセット、残りは重み+1する。
// より自然かつ万遍ないトークができたらいいな
roulette.clean
{
  foreach GETVARLIST('roulette.'); _vname {
    ERASEVAR(_vname)
  }
}

roulette.exec
{
  _name = _argv[0]

  // 対象トークの重みと累積和を取得
  roulette.getcumsum(_name, &_cumsum, &_hashes)
  _cumsum_str = _cumsum
  _hashes = String2Array(_hashes)

  // 重みを考慮してトークを選択
  _index = roulette.binsearch(_name, _cumsum_str)

  // 各トークの重みを更新
  for _i=0; _i<ARRAYSIZE(_hashes); _i++ {
    _hash = _hashes[_i]
    _vname = 'roulette.' + _name + '.weight.' + _hash
    if _i == _index {
      // 選ばれたトークの重みを1に
      LETTONAME(_vname, 1)
    }
    else {
      // 選ばれなかったトークの重みを増やす
      LETTONAME(_vname, TOINT(EVAL(_vname))+10)
    }
  }

  if _index > ARRAYSIZE(EVAL(_name)) {
    'error: 異常なインデックス:' + _index
    return
  }

  --
  EVAL(_name+'['+_index+']')
}

roulette.getcumsum
{
  _name = _argv[0]
  // _argv[1]: cumsum
  // _argv[2]: hashes

  // 現在のトークごとの重みを取得
  _weights = IARRAY
  _hashes = IARRAY
  foreach EVAL(_name); _talk {
    _hash = STRDIGEST(_talk)
    _vname = 'roulette.' + _name + '.weight.' + _hash
    _weight = 0
    if ISVAR(_vname) {
      _weight = EVAL(_vname)
    }
    else {
      _weight = 1
    }
    LETTONAME(_vname, _weight)
    _weights ,= _weight
    _hashes ,= _hash
  }

  // 重みの累積和を取得
  _cumsum = (IARRAY, 0)
  for _i=0; _i<ARRAYSIZE(_weights); _i++ {
    _cumsum ,= (_cumsum[_i] + _weights[_i])
  }

  _argv[1] = Array2String(_cumsum) // cumsum
  _argv[2] = Array2String(_hashes) // hashes
}

Array2String
{
  _array = _argv
  _str = ''
  for _i=0; _i<ARRAYSIZE(_array); _i++ {
    _str += _array[_i] + ','
  }
  ERASE(_str, -1, 1)
}

String2Array
{
  SPLIT(_argv[0], ',')
}

roulette.binsearch
{
  _name = _argv[0]
  _cumsum = String2Array(_argv[1])
  _totalweight = _cumsum[ARRAYSIZE(_cumsum) - 1]

  _value = RAND(_totalweight)

  if _value <= 0 {
    0
    return
  }

  _low = 0
  _high = ARRAYSIZE(_cumsum) - 1

  while 1 {
    _i = TOINT((_low+_high)/2)

    if _cumsum[_i] >= _value {
      _high = _i
    }
    else {
      _low = _i
    }

    if _high - _low == 1 {
      _high - 1
      return
    }
  }
}
