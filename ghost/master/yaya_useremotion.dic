ShowUserEmotions
{
  _fontname = 'ＭＳ 明朝,ＭＳ ゴシック'
  _fontsize = 12

  _emoemoemo = IARRAY
  for _i=0; _i<ARRAYSIZE(emo_labels); _i++ {
    _emoemoemo ,= 0.0
  }

  for _i=lastemo_size; _i<ARRAYSIZE(emo_addends.index); _i++ {
    _index = emo_addends.index[_i]
    _addend = emo_addends.addend[_i]
    _emoemoemo[_index] += TOREAL(_addend)
  }

  _emotions = IARRAY
  _emotions_strlen = 0
  for _i=0; _i<ARRAYSIZE(emo_labels); _i++ {
    _e = "\f[name,%(_fontname)]\f[height,%(_fontsize)]%(emo_labels[_i])"

    _addend_color = ''
    if _emoemoemo[_i] > 0 {
      _addend_color += '\f[color,0,250,0]+'
    }
    elseif _emoemoemo[_i] < 0 {
      _addend_color += '\f[color,250,0,0]'
    }

    if user_emotions[_i] == 1 && _emoemoemo[_i] < 0 {
      _addend_color += '-'
      _emoemoemo[_i] = 0
    }

    if _emoemoemo[_i] == 0 {
      _e += STRFORM('$.1f', user_emotions[_i])
    }
    else {
      _user_emotion = STRFORM('$.1f', user_emotions[_i]+_emoemoemo[_i])
      _e += "%(_user_emotion)%(_addend_color)%(TOINT(_emoemoemo[_i]))"
    }

    _emotions ,= "%(_e)\f[default]"
    _emotions_strlen += STRLENHALF(SHIORI3FW.RemoveAllTags(_e))
  }
  lastemo_size = ARRAYSIZE(emo_addends.index)

  _x_limit = TOREAL(ARRAYSIZE(emo_labels))
  _y_limit = 1
  _perline_strlen = _emotions_strlen / _x_limit
  while _fontsize * _perline_strlen * _x_limit > balloon_width {
    _x_limit /= 2
    _y_limit *= 2
  }

  _left_margin_x = balloon_width / (_x_limit + 1) * 1 - /
    TOINT(STRLENHALF(SHIORI3FW.RemoveAllTags(_emotions[0]))) * _fontsize / 2
  _right_margin_x = balloon_width - /
    balloon_width / (_x_limit + 1) * _x_limit - /
    TOINT(STRLENHALF(SHIORI3FW.RemoveAllTags(_emotions[ARRAYSIZE(emo_labels)-1]))) * _fontsize / 2
  _margin_x = (_right_margin_x + _left_margin_x) / 2 - _fontsize / 2

  _emotions_script = ''
  for _i=0; _i<ARRAYSIZE(emo_labels); _i++ {
    _len = TOINT(STRLENHALF(SHIORI3FW.RemoveAllTags(_emotions[_i])))
    _x = _i % _x_limit
    _y = _i / TOINT(_x_limit)
    _current_x = balloon_width / (_x_limit + 1) * (_x + 1) - (_len * _fontsize / 2)
    _current_x += _margin_x * (_x / (_x_limit - 1) * 2 - 1)

    _current_y_em = balloon_rows_1 - _y_limit + _y + 1
    _emotions_script += "\_l[%(_current_x),%(_current_y_em)em]%(_emotions[_i])"
  }

  _emotions_script = CUTSPACE(_emotions_script)

  "\1\_q%(_emotions_script)\n\_q\_l[0,0]\![raise,OnUpdateUserEmotions]"
}

UpdateUserEmotions
{
  _args = ''
  foreach _argv; _arg {
    _args += "%(_arg),"
  }
  _args = ERASE(_args, -1, 1)

  "\![embed,OnQueueUpdateUserEmotions,%(_args)]"
}

OnQueueUpdateUserEmotions
{
  // 影響力を失った加算値を配列から削除
  _rho = 60 * 15
  for _i=0; _i<ARRAYSIZE(emo_addends.index); _i++ {
    if _now - emo_addends.index[_i] > _rho {
      emo_addends.index[_i] = IARRAY
      emo_addends.addend[_i] = IARRAY
      emo_addends.fromtime[_i] = IARRAY
      _i--
    }
  }

  _now = systemuptime
  for _i=0; _i<ARRAYSIZE(reference); _i += 2 {
    if ISVAR("emo_index.%(reference[_i])") {
      _index = TOINT(EVAL("emo_index.%(reference[_i])"))
      _addend = reference[_i + 1]
      emo_addends.index ,= _index
      emo_addends.addend ,= _addend
      emo_addends.fromtime ,= _now
    }
  }

  // 表示している感情値を消去
  "\1\c[line,%(ARRAYSIZE(emo_labels)),0]"
  --
  // 新たに現在の感情値を表示
  ShowUserEmotions
}

OnUpdateUserEmotions
{
  // 感情増減の影響は15分で消える
  _rho = 60 * 15

  user_emotions = IARRAY
  for _i=0; _i<ARRAYSIZE(emo_labels); _i++ {
    user_emotions ,= 0.0
  }

  _now = systemuptime
  for _i=0; _i<ARRAYSIZE(emo_addends); _i++ {
    _index = emo_addends.index[_i]
    _addend = emo_addends.addend[_i]
    _fromtime = emo_addends.fromtime[_i]

    // 少しずつ減っていき、15分で0になる
    if _now - _fromtime < _rho {
      _pi = 3.141592
      user_emotions[_index] += _addend * COS(2*_pi*0.25*(_now-_fromtime)/_rho)
    }
  }
}
