//******************************************************************************
//初期化処理
//******************************************************************************

// 初期化関数
// 変数が存在しない場合のみ代入する
InitVar
{
  _var_name = _argv[0]
  _value = _argv[1]
  if !ISVAR(_var_name) {
    EVAL(_var_name + "=" + _value)
  }
}

//初期化処理 起動毎に呼び出される
InitializeVariable
{
  //---- 変数の初期化(初回起動時のみ設定)
  InitVar('username', 'ユーザ')
  InitVar('teachusername', 0)
  InitVar('IsJihouActive', '有効')
  InitVar('circadian_rhythm', '設定しない')
  InitVar('isdebug', 0)
  InitVar('good_touch_count', 0)
  InitVar('bad_touch_count', 0)
  InitVar('total_talk_count', 0)
  InitVar('uwanosora_minute', 5)
  InitVar('hasSuicideInfo', 0)

  //---- 変数の初期化(起動毎に設定)
  ghostboottime = systemuptime
  lastbootdate = getDate
  lastresponce = systemuptime
  touch_count = 0
  last_touch_part = ''
  first_touch = 0
  isKeyBlocked = 0
  wheel_inputtable_tick = 0

  getSuntimes

  // SAORI-basicの入出力をUTF-8で行うように設定
  FUNCTIONEX('saori\proxy_ex.dll', '/charset', 'UTF-8')
}

// スクリプトによる初期化処理
InitialScripts
{
  MakeKeroBalloownFollow
  --
  _underwear = ("A", "B")
  _u = _underwear[RAND(ARRAYSIZE(_underwear))]
  "\0\![bind,下着,%(_u),1]"
}

//\1バルーンを\0サーフェスに追従させる
MakeKeroBalloownFollow
{
  '\1\![set,alignmenttodesktop,free]\![move,0,0,0,0,left.top,left.top]\![set,sticky-window,1,0]'
}

getDate
{
  STRFORM('$04d$02d$02d', year, month, day)
}

getSuntimes
{
  _suntimes = FUNCTIONEX('saori\proxy_ex.dll', 'sunset.exe', getDate)

  _sunrise = _suntimes[0,';']
  sunrisetime = (TOINT(_sunrise[0,',']), TOINT(_sunrise[1,',']), TOINT(_sunrise[2,',']))
  sunrisetime.hour = TOINT(_sunrise[0,','])
  sunrisetime.minute = TOINT(_sunrise[1,','])
  sunrisetime.second = TOINT(_sunrise[2,','])

  _sunset = _suntimes[1,';']
  sunsettime = (TOINT(_sunset[0,',']), TOINT(_sunset[1,',']), TOINT(_sunset[2,',']))
  sunsettime.hour = TOINT(_sunset[0,','])
  sunsettime.minute = TOINT(_sunset[1,','])
  sunsettime.second = TOINT(_sunset[2,','])
}

GetProperties
{
  GetGhostInfo
  --
  GetBalloonInfo
  --
  GetShellInfo
  --
  // GetShellInfo後に処理する必要があるのでembedで呼ぶ
  '\![embed,OnGetShellListInfo]'
}

GetGhostInfo
{
  '\![get,property,OnGetGhostInfo,currentghost.sakuraname]'
}

GetBalloonInfo
{
  '\![get,property,OnGetBalloonInfo,currentghost.balloon.name,currentghost.balloon.scope(0).lines,currentghost.balloon.scope(0).validwidth,currentghost.balloon.scope(0).char_width]'
}

GetShellInfo
{
  '\![get,property,OnGetShellInfo,currentghost.shelllist.current.name,currentghost.shelllist.count]'
}

OnGetGhostInfo
{
  //reference[0]: currentghost.sakuraname
  sakura_name = reference[0]
}

OnGetBalloonInfo
{
  //reference[0]: currentghost.balloon.name
  //reference[1]: currentghost.balloon.scope(0).lines
  //reference[2]: currentghost.balloon.scope(0).validwidth.initial
  //reference[3]: currentghost.balloon.scope(0).char_width

  balloon_name = reference[0]
  balloon_rows = reference[1]

  ERASEVAR('forced_balloon_cols')
  case balloon_name {
    when '霧の郊外にて' {
      balloon_cols = 24
    }
    when 'SSPデフォルト+' {
      balloon_cols = 24
    }
    others
    {
      _zenkaku_char_width = reference[3] * 2
      balloon_cols = TOINT(reference[2] / _zenkaku_char_width)
    }
  }
}

OnGetShellInfo
{
  //reference[0]: currentghost.shelllist.current.name
  //reference[1]: currentghost.shelllist.count
  shell_name = reference[0]
  shell_count = reference[1]
}

OnGetShellListInfo
{
  _cmd = '\![get,property,OnGetShellListInfoAfter,'
  for _i = 0; _i < shell_count; _i++ {
    _cmd += 'currentghost.shelllist.index(' + _i + ').name'
  }
  _cmd += ']'

  _cmd
}

OnGetShellListInfoAfter
{
  shell_list = IARRAY
  for _i = 0; _i < ARRAYSIZE(reference); _i++ {
    shell_list = (shell_list,reference[_i])
  }
}

